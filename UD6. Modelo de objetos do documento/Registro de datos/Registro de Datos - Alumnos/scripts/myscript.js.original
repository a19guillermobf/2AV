/**Parece que de primeiras tem que estar só activado o campo do nif, e se este é correto (verificaçom por regexp?) habilita o resto dos campos para 
 * crear ou editar.
 * Cando se introduce um nif, verifica se existe numha estrutura de dados que teremos que crear para gardar o que se vai metendo.
 * Se existe carga os datos no formulario, e avisa com um alert de que se carregarom
 * Se nom, habilita o formulario para ediçom
 * Polo que parece no video, o evento que executa a comprovaçom do nif é cando esse campo perde o foco
 * 
 * Logo, vai creando na parte de abaixo umha táboa igual que no exercicio dos livros, com um botom pa
 * borrar a entrada e na última fila, o número total de registros gardados
 * 
 * Chaves, crear fragmentos para ir creando a tábua tanto cando se engade coma cando se borra algo nos datos
 * Engadir um dataset no botom de borrar de cada entrada na tábua, por exemplo co DNI, que sirva pa relacionar o que hai na tábua co que temos na estrutura de datos
 * Crear umha classe que sirva para gardar os datos, cos seus setters e getters, e logo ir gardando instancias dessa classe??
 * Crear umha classe Interface que tenha os métodos pa engadir ou borrar alunas, pa actualizar os datos da session?? 
 * Polo que apuntei na outra tarefa, esta classe teria estes métodos e ademais teria internamente a estrutura de datos 
 */

/**A classe para a interfaze, entendo que só vai ter que ter a estrutura de dados, que vai ser algo do estilo array/coleçom de classes de 
 * alunado. E ademais, vai ser a que interatue co HTML. Terá que recolher os datos da sessom, modificar o html, crear o fragmento esse?
 */
class Controlador{
    constructor(alunos){
        this.alunos = alunos;
    }
    /**Recolhe os elementos que hai no HTML creando umha instancia 
     * da classe aluno
    */
    recolheDatosHTML(){
        /**Recolhe um string */
        let nif = document.querySelector("#nif").value;
        /**Recolhe um string */
        let nome = document.querySelector("#nombre").value;
        /**Este vai revisar se o sexo Home está marcado, se está colhe o valor desse elemento, se nom colhe o de mulher
         * Haveria que se assegurar de que cando se chama a esta funçom todos os campos estám cubertos,
         * ainda que polo que se ve no vídeo, nalgúm momento hai que fazer que Hombre esteja marcado por defecto
         */
        let sexo = document.getElementsByName("sexo")[0].checked ? document.getElementsByName("sexo")[0].value : document.getElementsByName("sexo")[1].value;
        /**Recolhe um string */
        let enderezo = document.querySelector("#direccion").value;
        /**Recolhe um valor do 0 ao 5, depois entendo que haveria que relacionar co string correspondente
         * com por exemplo document.querySelectorAll("option")[3].textContent, sendo 3 o número que recolhemos em estudo
         */
        let estudos = document.querySelector("#nombre").value;
        /**String ou int */
        let telefone = document.querySelector("#telefono").value;
        /**String */
        let mail = document.querySelector("#email").value;
        /**Agora, para os checkbox, com document.querySelectorAll('input[type="checkbox"]') ou com document.getElementsByName("aficion")
         *  seleccionam-se os tres, haveria que ver quais som os 
         * checked. Tamém haveria que ver se "Otra" tem algum contido.
         * Estes valores haveria que garda-los numha estrutura de datos, por exemplo um array ou assi
         * Entom, igual podo crear umha variável pa recolher os checkbox, e logo a variável hobis, array onde ir metendo os que correspondam
         */
        let checkes = document.getElementsByName("aficion");
        let hobis = [];
        checkes.forEach(elemento => {
            if (elemento.checked){
                hobis.push(elemento.nextSibling.textContent);
            }
        });
        if (document.getElementsByName("otra")[0].value != "" ){
            hobis.push(document.getElementsByName("otra")[0].value)
        }
        /**Crea a instancia da classe cos valores recolhidos */
        let novoaluno = new Aluno(nif,nome,sexo,enderezo,data,estudos,telefone,mail,hobis);
        /**Devolve a instancia */
        return novoaluno
    }
    actualizaDatos(){

    }
    actualizaHTML(){

    }
    reseteaFormulario(){

    }
}



//document.querySelector("#nif").value
document.getElementsByName("sexo")
//document.getElementsByName("sexo")[0].checked

class Aluno{
    //Construtor ao que se lhe passam todos os campos
    constructor(nif,nome,sexo,enderezo,data,estudos,telefone,mail,hobis){
        this.nif = nif;
        this.nome = nome;
        this.sexo = sexo;
        this.enderezo = enderezo;
        this.data = data;
        this.estudos = estudos;
        this.telefone = telefone;
        this.mail = mail;
        this.hobis = hobis;
    }
    //Getters
    get nif(){
        return this.nif;
    }
    get nome(){
        return this.nome;
    }
    get sexo(){
        return this.sexo;
    }
    get enderezo(){
        return this.enderezo;
    }
    get data(){
        return this.data;
    }
    get estudos(){
        return this.estudos;
    }
    get telefone(){
        return this.telefone;
    }
    get mail(){
        return this.mail;
    }
    get hobis(){
        return this.hobis;
    }
    //Setters
    /**Aqui entendo que já nom é só asignar valores sem mais, suponho que o nif nom se vai 
     * poder cambiar mais, polo que já nom lhe fago setter.
     * Logo, o campo hobis por exemplo, entendo que é um array de strings ou algo assi, 
     * polo que teria que actualizar com um novo array, ainda que se o que recolho do html é
     * já umha estrutura assi... igual si que pode ser umha simples assignaçom... vou vendo
     */
    set nome(nome){
        this.nome = nome;
    }
    set sexo(sexo){
        this.sexo = sexo;
    }
    set enderezo(enderezo){
        this.enderezo = enderezo;
    }
    set data(data){
        this.data = data;
    }
    set estudos(estudos){
        this.estudos = estudos;
    }
    set telefone(telefone){
        this.telefone = telefone;
    }
    set mail(mail){
        this.mail = mail;
    }
    set hobis(hobis){
        this.hobis = hobis;
    }
}